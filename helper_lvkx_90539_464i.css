const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
8 / apple
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
orange


const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
17,43,16,3,51,40,66,14,65,59,0,45,45,29,41,34,64,34,28,20,10,67,4,88,30,76,3,28,15,52,96,87,74,63,52,94,73,75,10,60,56,2,8,32,71,65,0,12,46,89,1,85,51,21,18,29,20,22,57,23,78,86,33,50,46,52,17,78,10,19,0,85,40,53,48,70 * orange
const reverseWords = str => str.split(" ").reverse().join(" ");
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
orange + 17,63,34,10,82,35,54,17,87,29,18,71,81,43,92,76,18,86,73,40,76,74,36,77,26,20,18,61

const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
65 - 95
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
kiwi * 94
function addNumbers(a, b) { return a + b; }
22 / 66
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const removeDuplicates = array => Array.from(new Set(array));
